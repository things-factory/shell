{"version":3,"file":"index.js","sources":["webpack:///webpack/bootstrap","webpack:///./www/js/native-importer.import","webpack:///./www/js/_index.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\n  export var natives = [];\n\n  \n  ","import { natives } from './native-importer.import'\n\nvar app = {\n  // Application Constructor\n  initialize: function() {\n    this.onpremiseServerInfos = {}\n    document.addEventListener('deviceready', this.onDeviceReady.bind(this), false)\n  },\n\n  // deviceready Event Handler\n  //\n  // Bind any cordova events here. Common events are:\n  // 'pause', 'resume', etc.\n  onDeviceReady: function() {\n    window.open = window.open = cordova.InAppBrowser.open\n    this.zeroconf = cordova.plugins.zeroconf\n    this.zeroconf.watchAddressFamily = 'ipv4'\n\n    networkinterface.getWiFiIPAddress(\n      ipInformation => {\n        this.ipInformation = ipInformation\n\n        var currentServer = localStorage.getItem('current_server')\n        if (!currentServer) {\n          this.browseOnpremiseServers()\n          this.showServerSelector()\n        } else this.openThingsFactory(currentServer)\n      },\n      () => {\n        console.log('no WIFI')\n      }\n    )\n  },\n\n  browseOnpremiseServers: function() {\n    this.zeroconf.watch(`_tfserver._tcp.`, 'local.', result => {\n      var action = result.action\n      var service = result.service\n\n      switch (action) {\n        case 'added':\n          break\n\n        case 'resolved':\n          this.onpremiseServerInfos[service.name] = service.txtRecord.address\n          break\n\n        default:\n          delete this.onpremiseServerInfos[service.name]\n          break\n      }\n\n      if (!this.connected && Object.keys(this.onpremiseServerInfos).length > 0) this.showServerSelector()\n    })\n  },\n\n  showServerSelector: function() {\n    SelectorCordovaPlugin.hideSelector()\n    var serverList = []\n\n    for (var key in this.onpremiseServerInfos) {\n      var serverInfo = this.onpremiseServerInfos[key]\n      serverList.push({\n        description: key,\n        value: serverInfo\n      })\n    }\n\n    if (serverList.length == 0) return\n\n    //config here... (see config for each screenshot below to get desired results)\n    var config = {\n      title: 'Choose server',\n      items: [[[...serverList]]],\n      // defaultItems: {\n      //   //which items to display, example [{\"0\" :\"2\"},{\"1\" :\"Apple\"}] (index:value}\n      // },\n      displayKey: 'description',\n      positiveButtonText: 'OK',\n      negativeButtonText: 'Cancel',\n      theme: 'dark' //lighter or darker theme, not available on iOS yet\n      // wrapWheelText: false, //wrap the wheel for infinite scroll, not available on iOS\n    }\n\n    //do something useful with the result:\n    SelectorCordovaPlugin.showSelector(\n      config,\n      result => {\n        this.openThingsFactory(serverList[result[0].index].value)\n      },\n      () => {\n        console.log('Canceled')\n      }\n    )\n  },\n\n  openThingsFactory: function(currentServer) {\n    if (!currentServer) return\n\n    localStorage.setItem('current_server', currentServer)\n\n    this.iab = cordova.InAppBrowser.open(`http://${currentServer}`, '_self', 'location=no,zoom=no')\n    this.iab.addEventListener('loadstop', e => {\n      this.connected = true\n      console.log('loadstop', e)\n    })\n    this.iab.addEventListener('exit', e => {\n      this.connected = false\n      this.showServerSelector()\n      console.log('exit', e)\n    })\n    this.iab.addEventListener('message', e => {\n      if (!e || !e.data) return\n      var { type, detail } = e.data\n\n      natives.forEach(native => {\n        native.onMessage &&\n          native.onMessage({\n            iab: this.iab,\n            type,\n            detail\n          })\n      })\n    })\n  }\n}\n\napp.initialize()\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AClsourceRoot":""}