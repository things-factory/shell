#!/usr/bin/env node

'use strict'

const args = require('args')
const path = require('path')

const createConnection = require('typeorm').createConnection

const appRootPath = require('app-root-path').path
const appPackage = require(path.resolve(appRootPath, 'package.json'))

let factoryShellPath
if (appPackage.name === '@things-factory/shell') {
  factoryShellPath = appRootPath
} else {
  try {
    factoryShellPath = path.dirname(require.resolve('@things-factory/shell/package.json'))
  } catch (e) {
    console.error(e, '@things-factory/shell module not found.')
    return
  }
}

let ormconfig

try {
  ormconfig = require(path.resolve(appRootPath, 'ormconfig'))
} catch (e) {
  ormconfig = require('@things-factory/shell/ormconfig')
}

createConnection({
  ...ormconfig,
  logging: true,
  entities: [path.resolve(factoryShellPath, 'dist-server/entities/**/*.js')],
  migrations: [path.resolve(factoryShellPath, 'dist-server/migrations/**/*.js')],
  subscribers: [path.resolve(factoryShellPath, 'dist-server/subscribers/**/*.js')]
}).then((connection, ...others) => {
  args.option('undo', 'Reverts last executed migration')
  const flags = args.parse(process.argv)

  console.log('Database connection established')
  if (flags.undo) {
    connection.undoLastMigration()
  } else {
    connection.runMigrations()
  }
  console.log('Database Migration Done.')
})
