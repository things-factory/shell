#!/usr/bin/env node

'use strict'

var path = require('path')
const APP_ROOT_PATH = require('app-root-path').path
const APP_PACKAGE = require(path.resolve(APP_ROOT_PATH, 'package.json'))
const SHELL_PACKAGE_NAME = '@things-factory/shell'

var args = process.argv.filter(arg => arg.startsWith('--'))

var modeArgIdx = args.findIndex(a => /--mode/.test(a))
var mode = 'run'
if (modeArgIdx > -1) {
  mode = args.splice(modeArgIdx, 1).join()
  let matched = mode.match(/--mode=(\w+)/)
  mode = matched[1]
}

var platformArgIdx = args.findIndex(a => /--platform/.test(a))
var platform = 'android'
if (platformArgIdx > -1) {
  platform = args.splice(platformArgIdx, 1).join()
  let matched = platform.match(/--platform=(\w+)/)
  platform = matched[1]
}

var argString = args.join(' ')

var spawn = require('child_process').spawn

var shellModulePath
if (APP_PACKAGE.name == SHELL_PACKAGE_NAME) shellModulePath = path.resolve(APP_ROOT_PATH, './')
else shellModulePath = path.resolve(APP_ROOT_PATH, 'node_modules', SHELL_PACKAGE_NAME)

var spawnArgs = [mode, platform]
if (argString) spawnArgs.push(argString)

var cordova = spawn('cordova', spawnArgs, {
  cwd: shellModulePath
})
cordova.stdout.on('data', function(data) {
  console.log(data.toString())
})

cordova.stderr.on('data', function(data) {
  console.log('stderr: ' + data.toString())
})

cordova.on('exit', function(code) {
  console.log('child process exited with code ' + code.toString())
})
